# code: language=ansible
---
# tasks file for ansible-podman-rootless-play
# https://stackoverflow.com/questions/41725555/how-to-use-omit-with-ansible-and-avoid-any-errors
- name: Set podman network
  containers.podman.podman_network:
    debug: "{{ podman_network.debug | default(omit) }}"
    disable_dns: "{{ podman_network.disable_dns | default(omit) }}"
    driver: "{{ podman_network.driver | default(omit) }}"
    executable: "{{ podman_network.executable | default(omit) }}"
    gateway: "{{ podman_network.gateway | default(omit) }}"
    internal: "{{ podman_network.internal | default(omit) }}"
    ip_range: "{{ podman_network.ip_range | default(omit) }}"
    ipv6: "{{ podman_network.ipv6 | default(omit) }}"
    macvlan: "{{ podman_network.macvlan | default(omit) }}"
    name: "{{ podman_network.name }}"
    opt: "{{ podman_network.opt | default(omit) }}"
    recreate: "{{ podman_network.recreate | default(omit) }}"
    state: "{{ podman_network.state | default(omit) }}"
    subnet: "{{ podman_network.subnet | default(omit) }}"
  when:
    - podman_network.name != none

- name: Set Podman volume
  containers.podman.podman_volume:
    debug: "{{ podman_volume.debug | default(omit) }}"
    driver: "{{ podman_volume.driver | default(omit) }}"
    executable: "{{ podman_volume.executable | default(omit) }}"
    label: "{{ podman_volume.label | default(omit) }}"
    name: "{{ podman_volume.name }}"
    options: "{{ podman_volume.options | default(omit) }}"
    recreate: "{{ podman_volume.recreate | default(omit) }}"
    state: "{{ podman_volume.state | default(omit) }}"
  when:
    - podman_volume.name != none

- name: Copy k8s yaml file to target host
  ansible.builtin.copy:
    src: "{{ podman_play.kube_file }}"
    dest: "~/.ansible/tmp/{{ podman_play.kube_file.split('/')[-1] }}"

- name: Run Podman play
  containers.podman.podman_play:
    authfile: "{{ podman_play.authfile | default(omit) }}"
    cert_dir: "{{ podman_play.cert_dir | default(omit) }}"
    configmap: "{{ podman_play.configmap | default(omit) }}"
    debug: "{{ podman_play.debug | default(omit) }}"
    executable: "{{ podman_play.executable | default(omit) }}"
    kube_file: "~/.ansible/tmp/{{ podman_play.kube_file.split('/')[-1] }}"
    log_driver: "{{ podman_play.log_driver | default(omit) }}"
    log_level: "{{ podman_play.log_level | default(omit) }}"
    network: "{{ podman_play.network | default(omit) }}"
    password: "{{ podman_play.password | default(omit) }}"
    quiet: "{{ podman_play.quiet | default(omit) }}"
    recreate: "{{ podman_play.recreate | default(omit) }}"
    seccomp_profile_root: "{{ podman_play.seccomp_profile_root | default(omit) }}"
    state: "{{ podman_play.state }}"
    tls_verify: "{{ podman_play.tls_verify | default(omit) }}"
    username: "{{ podman_play.username | default(omit) }}"
  when:
    - podman_play.kube_file != none
    - podman_play.state != none

- name: Delete tmp k8s yaml file
  ansible.builtin.file:
    path: "~/.ansible/tmp/{{ podman_play.kube_file.split('/')[-1] }}"
    state: absent

- name: Detect pod info
  containers.podman.podman_pod_info:
    name: "{{ podman_generate_systemd.name }}"
  register: pod_info

- name: Set pod systemd service
  when:
    - podman_generate_systemd.name != none
    - pod_info.pods[0].Hostname is defined
    - service.podman_pod.user_scope.skipped is false
  block:
    - name: Enable pod systemd service
      when:
        - service.podman_pod.user_scope.enabled is true
      block:
        - name: Generate systemd service
          containers.podman.podman_generate_systemd:
            after: "{{ podman_generate_systemd.after | default(omit) }}"
            container_prefix: "{{ podman_generate_systemd.container_prefix | default(omit) }}"
            dest: "{{ podman_generate_systemd.dest | default(omit) }}"
            env: "{{ podman_generate_systemd.env | default(omit) }}"
            executable: "{{ podman_generate_systemd.executable | default(omit) }}"
            name: "{{ podman_generate_systemd.name }}"
            new: "{{ podman_generate_systemd.new | default(omit) }}"
            no_header: "{{ podman_generate_systemd.no_header | default(omit) }}"
            pod_prefix: "{{ podman_generate_systemd.pod_prefix | default(omit) }}"
            requires: "{{ podman_generate_systemd.requires | default(omit) }}"
            restart_policy: "{{ podman_generate_systemd.restart_policy | default(omit) }}"
            restart_sec: "{{ podman_generate_systemd.restart_sec | default(omit) }}"
            separator: "{{ podman_generate_systemd.separator | default(omit) }}"
            start_timeout: "{{ podman_generate_systemd.start_timeout | default(omit) }}"
            stop_timeout: "{{ podman_generate_systemd.stop_timeout | default(omit) }}"
            use_names: "{{ podman_generate_systemd.use_names | default(omit) }}"
            wants: "{{ podman_generate_systemd.wants | default(omit) }}"
  
        - name: Enable systemd service
          ansible.builtin.systemd:
            name: "{{ podman_generate_systemd.pod_prefix | default('pod')}}-{{ podman_generate_systemd.name }}.service"
            state: "{{ service.podman_pod.user_scope.state | default(omit) }}"
            enabled: true
            scope: user


- name: Set systemd lingering
  ansible.builtin.include_tasks:
    file: Set-SystemdLinger.yml
  vars:
    target_user: "{{ ansible_user }}"
  when:
    - ansible_service_mgr == "systemd"
    - service.systemd_lingering.state != "skipped"
