# code: language=ansible
---
# vars file for ansible-podman-rootless-provision

# podman package state,
# vars_package.podman_state: present/absent/skipped
#   present: 
#     install podman package
#   absent:
#     uninstall podman package
#   skipped: 
#     skip the implement the podman package task
# vars_package.podman.dnf:
#   dnf related config to install podman for special requirement, e.g. install the latest version from update testing repo
vars_package:
  podman:
    state: present
    dnf:
      enablerepo: # updates-testing
      update_cache: # true


# target user to run rootless podman
target_user: "{{ ansible_user }}"


# cgroups_delegation:
# background: 
#   https://github.com/containers/podman/blob/main/troubleshooting.md#26-running-containers-with-resource-limits-fails-with-a-permissions-error
#   https://wiki.archlinux.org/title/Cgroups#User_delegation
#   https://wiki.gentoo.org/wiki/OpenRC/CGroups#CGroups_version_2_2
#   https://github.com/containers/podman/issues/11841#issuecomment-933596023
# vars_cgroups_delegation.all_users: 
#   state: present/absent
#     present:
#       for systemd distro: 
#         config cgroup delegate in /etc/systemd/system/user@.service.d/delegate.conf 
#         according to the setting in vars_cgroups_delegation.all_users.resources
#       for openrc distro: 
#         set "rc_cgroup_mode=unified" in /etc/rc.conf
#     absent:
#       remove cgroup config with this role own partten (if exist)
#     skipped:
#       skip the cgroup delegation config process for all users
#   present_override: true/false
#       override the origin cgroup delegation config when state set to present if exist
#
# per_user cgroup delegation settings only work for systemd base distro
# vars_cgroups_delegation.pre_user: 
#   state: present/absent/skipped
#     present:
#       for systemd distro: config cgroup delegate in /etc/systemd/system/user@{{ target_user_uid }}.service.d/delegate.conf 
#       according to the setting in vars_cgroups_delegation.pre_user.resources
#     absent:
#       remove cgroup config with this role own partten (if there)
#     skipped:
#       skip the cgroup delegation config process for each target user
# note: if podman package is not there, the cgroup delegate file create by this role 
#   will also be delete
vars_cgroups_delegation:
  all_users:
    state: present
    present_override: false
    resources: cpu cpuset io memory pids
  per_user:
    state: skipped
    resources: cpu cpuset io memory pids


# sysctl_params:
# background:
#   https://github.com/containers/podman/blob/main/troubleshooting.md#5-rootless-containers-cannot-ping-hosts
#   https://github.com/containers/podman/blob/main/rootless.md#:~:text=Podman%20can%20not%20create%20containers%20that%20bind%20to%20ports%20%3C%201024
# vars_sysctl_params.state: present/absent/skipped
#   present:
#     create sysctl conf file /etc/sysctl.d/{{ role_name }}.conf 
#     for podman rootless according to vars_sysctl_params.list
#   absent：
#     delete sysctl conf file /etc/sysctl.d/{{ role_name }}.conf 
#   skip：
#     skip the implement of sysctl permission config task 
# note: if podman package is not there, the sysctl conf file create by this role 
#   will also be delete
vars_sysctl_params:
  state: present
  list:
    - name: net.ipv4.ping_group_range
      value: 0 2000000
    - name: net.ipv4.ip_unprivileged_port_start
      value: 53


# pam_limits:
# background:
#   https://github.com/containers/podman/issues/10051
#   https://phoenixnap.com/kb/ulimit-linux-command
# vars_pam_limits.state: present/absent/skipped
#   present: 
#     create security limits drop-in conf file /etc/security/limits.d/{{ role_name }}-{{ target_user }}.conf
#     for podman rootless according to vars_pam_limits.list
#   absent:
#     delete security limits drop-in conf file for podman rootless 
#   skip:
#     skip the implement of security limits drop-in conf file
# note: if podman package is not there, the security limits drop-in conf file create by this role 
#   will also be delete
vars_pam_limits:
  state: skipped
  list:
    - comment: add memory lock hard limit to {{ target_user }}
      limit_item: memlock
      limit_type: hard
      value: -1
    - comment: add memory lock soft limit to {{ target_user }}
      limit_item: memlock
      limit_type: soft
      value: -1


# sub_ids:
# background:
#   https://github.com/containers/podman/blob/main/troubleshooting.md#10-rootless-setup-user-invalid-argument
# vars_sub_ids.state: present/absent/skipped
#   present:
#     /etc/sub<u,g>id file will be created if not exists,
#     if file exist, it will check with the user/group exists or not,
#       if user/group not exist, it will create new record for user/group 
#         according to vars_sub_ids.subuid and vars_sub_ids.subgid
#       if user/group exists, it will not change anything
#   absent:
#     the config create by this role in /etc/sub<u,g>ids file will be delete,
#     it will not delete if the config is not create by this role.
#   skipped:
#     it will not check the state of /etc/sub<u,g>ids files or related config in the file.
# note: if podman package is not there, the config in sub<u,g>id create by this role 
#   will be delete
vars_sub_ids:
  state: present
  present_override: false
  subuid:
    user: "{{ target_user }}"
    start_from: 100000
    offset: 65536
  subgid:
    group: "{{ target_user }}"
    start_from: 100000
    offset: 65536

# kernel_modules:
# background:
#   https://github.com/containers/podman/commit/eab5a4cfb7b3bbb63cd2a1d9a5a69e9bc32d4cef#diff-d77924824df4702948dd3cfd6e377da2eb169d2811b4bfe072061f1f9aee48a0
#   https://virtualzone.de/posts/alpine-podman/#install-podman
# vars_kernel_modules.state: present/absent/skipped
#   present:
#     according to the kernel module requirement in vars_kernel_modules, enable podman rootless required kernel module(s) 
#     if related kernel modules not exist, the task will create related drop-in config file /etc/modules-load.d/{{ role_name }}.conf 
#     to present the kernel modules
#   absent:
#     delete the related drop-in config file /etc/modules-load.d/{{ role_name }}.conf
#   skipped:
#     skip this task
vars_kernel_modules:
  state: present
  list:
    - ip_tables


# podman config
# background:
#   containers.conf
#   https://github.com/containers/podman/blob/main/docs/tutorials/rootless_tutorial.md#user-configuration-files
#   https://github.com/containers/common/blob/main/docs/containers.conf.5.md
#   https://github.com/containers/common/blob/main/pkg/config/testdata/containers_default.conf
#   https://www.redhat.com/sysadmin/rootless-podman-user-namespace-modes#:~:text=Change%20the%20default%20user%20namespace%20mode
#   storage.conf
#   https://github.com/containers/podman/blob/main/vendor/github.com/containers/storage/storage.conf
#   https://github.com/containers/storage/blob/main/docs/containers-storage.conf.5.md
#   registries.conf
#   https://github.com/containers/image/blob/main/docs/containers-registries.conf.5.md
#   https://github.com/containers/podman/blob/main/test/registries.conf
vars_app_config:
  podman:
    containers_conf:
      state: skipped
      # path: /home/{{ target_user }}/.config/containers/containers.conf.d/{{ role_name }}.conf
      # dir: /home/{{ target_user }}/.config/containers/containers.conf.d/
      file_name: "{{ role_name }}.conf"
      content: |
        [containers]
        # log_driver="k8s-file"
        # log_size_max="10m"
        # tz = "Asia/Shanghai"
    storage_conf:
      state: skipped
      path: /home/{{ target_user }}/.config/containers/storage.conf
      content:
    registries_conf:
      state: skipped
      path: /home/{{ target_user }}/.config/containers/registries.conf
      content:



# service
# background: 
#   https://github.com/containers/podman/blob/main/docs/tutorials/socket_activation.md#socket-activation-of-the-api-service
#   https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/building_running_and_managing_containers/assembly_using-the-container-tools-api_building-running-and-managing-containers#proc_enabling-the-podman-api-using-systemd-in-rootless-mode_assembly_using-the-container-tools-api
#   https://wiki.archlinux.org/title/Systemd/User#Automatic_start-up_of_systemd_user_instances
# vars_service.podman_socket.user_scope: and
# vars_service.podman_socket.system_scope:
#   skipped: true/false, Whether to implement the user_scope / system_scope podman.socket service
#   enabled: true/false, Whether the service should start on boot.
#   state: reloaded/restarted/started/stopped, 
#     started/stopped: are idempotent actions that will not run commands unless necessary.
#     restarted: will always bounce the service.
#     reloaded: will always reload.
# vars_service.systemd_lingering.state: present/absent/skipped
#   enable:
#     enable the target user systemd lingering, aka: loginctl enable-linger {{ target_user }}
#   disable:
#     disable the target user systemd lingering, aka: loginctl disable-linger {{ target_user }}
#   skipped:
#     skip the systemd lingering process
vars_service:
  podman_socket:
    user_scope: 
      skipped: false
      enabled: true
      state: started
    system_scope: 
      skipped: true
      enabled: false
      state: stopped
  systemd_lingering:
    state: enable
