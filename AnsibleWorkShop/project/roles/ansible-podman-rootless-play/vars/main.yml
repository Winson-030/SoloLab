# code: language=ansible
---
# vars file for ansible-podman-rootless-play

# the host running podman
vars_podman_host:

# podman socket url config
# background: 
#   https://developer.mozilla.org/en-US/docs/Learn/Common_questions/Web_mechanics/What_is_a_URL#basics_anatomy_of_a_url
#   https://docs.ansible.com/ansible/latest/collections/ansible/builtin/uri_module.html
vars_podman_uri:
  scheme_authority: # default: http://d/ , https://docs.podman.io/en/latest/markdown/podman-system-service.1.html
  api_version: # default: v4.0.0
  unix_socket: # socket file path for podman, e.g. /run/user/1000/podman/podman.sock


# Send POST request to podman socket end point /libpod/networks/create
# aka podman cli: podman network create
# https://docs.ansible.com/ansible/latest/collections/containers/podman/podman_network_module.html#ansible-collections-containers-podman-podman-network-module
vars_podman_network:
  state: # present / absent, if empty, related process will skip 
  name: # string, Name of the Network, if empty, related process will skip 
  present:
    request_body:
      created: # string <date-time>, Created contains the timestamp when this network was created.
      dns_enabled: # boolean, default: false
      driver: # Driver for this Network, e.g. bridge ‚Üê (default), macvlan
      id: # ID of the Network.
      internal: # boolean, default: false, Internal is whether the Network should not have external routes to public or other Networks
      ipam_options: # object(dict), IPAMOptions contains options used for the ip assignment.
      ipv6_enabled: # boolean, default: false, IPv6Enabled if set to true an ipv6 subnet should be created for this net.
      labels: # object(dict), Labels is a set of key-value labels that have been applied to the Network.
      # name: "{{ vars_podman_network.name }}" # string, Name of the Network, if empty, related process will skip 
      network_dns_servers: # Array of strings, List of custom DNS server for podman's DNS resolver at network level, all the containers attached to this network will consider resolvers configured at network level.
      network_interface: # string, NetworkInterface is the network interface name on the host.
      options: # object(dict), Options is a set of key-value options that have been applied to the Network.
      subnets: # Array of objects (Subnet), Subnets to use for this network.


# Send POST request to podman socket end point /libpod/play/kube
# aka podman kube play
# https://docs.podman.io/en/latest/markdown/podman-kube-play.1.html
# https://docs.podman.io/en/latest/_static/api.html#tag/containers/operation/PlayKubeLibpod
vars_podman_play:
  state: # present / absent, if empty, podman play process will skip 
  kube_file: # path to the kube file, if empty, podman play process will skip 
  timeout: 300
  present: # params for podman kube play
    query_params:
      logDriver: # string, Logging driver for the containers in the pod.
      network: # Array of strings, USe the network mode or specify an array of networks.
      start: # boolean, Default: true, Start the pod after creating it.
      staticIPs: # Array of strings, Static IPs used for the pods.
      staticMACs: # Array of strings, Static MACs used for the pods.
      tlsVerify: # boolean, Default: true, Require HTTPS and verify signatures when contacting registries.
      wait: # boolean, Default: false, Clean up all objects created when a SIGTERM is received or pods exit.
  absent: # params for podman kube down
    query_params:
      force: # boolean, default: false, Remove volumes.

# https://docs.podman.io/en/latest/markdown/podman-generate-systemd.1.html
# https://docs.podman.io/en/latest/_static/api.html#tag/containers/operation/GenerateSystemdLibpod
vars_podman_generate_systemd:
  dest: # default: /home/{{ ansible_user }}/.config/systemd/user/, Destination of the generated systemd unit file(s), usually no need to change
  generate:
    path_params:
      name: # string, Name or ID of the container or pod.
    query_params:
      additionalEnvVariables: # Array of strings, Default: [], Set environment variables to the systemd unit files.
      after: # Array of strings, Default: [], Systemd After list for the container or pods.
      containerPrefix: # string, Default: "container", Systemd unit name prefix for containers.
      new: # boolean, Default: false, Create a new container instead of starting an existing one.
      noHeader: # boolean, Default: false, Do not generate the header including the Podman version and the timestamp.
      podPrefix: # string, Default: "pod", Systemd unit name prefix for pods.
      requires: # Array of strings, Default: [], Systemd Requires list for the container or pods.
      restartPolicy: # string, Default: "on-failure", Enum: "no" "on-success" "on-failure" "on-abnormal" "on-watchdog" "on-abort" "always", Systemd restart-policy.
      restartSec: # integer, Default: 0, Configures the time to sleep before restarting a service.
      separator: # string, Default: "-", Systemd unit name separator between name/id and prefix.
      startTimeout: # integer, Default: 0, Start timeout in seconds.
      stopTimeout: # integer, Default: 10, Stop timeout in seconds.
      useName: # boolean, Default: false, Use container/pod names instead of IDs.
      wants: # Array of strings, Default: [], Systemd Wants list for the container or pods.

vars_service:
  podman_pod:
    user_scope:
      skipped: true
      enabled: true
      state: started
