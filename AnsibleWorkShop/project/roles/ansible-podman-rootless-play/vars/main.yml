# code: language=ansible
---
# vars file for ansible-podman-rootless-play

api_version: v4.0.0 # v4.0.0 ← (default)

# containers.podman.podman_network
# https://docs.ansible.com/ansible/latest/collections/containers/podman/podman_network_module.html#ansible-collections-containers-podman-podman-network-module
vars_podman_network:
  state: # present / absent, if empty, related process will skip 
  request_body:
    created: # string <date-time>, Created contains the timestamp when this network was created.
    dns_enabled: # boolean, false ← (default) / true
    driver: # Driver for this Network, e.g. bridge ← (default), macvlan
    id: # ID of the Network.
    internal: # boolean, false ← (default) / true, Internal is whether the Network should not have external routes to public or other Networks
    ipam_options: # object(dict), IPAMOptions contains options used for the ip assignment.
    ipv6_enabled: # boolean, false ← (default) / true, IPv6Enabled if set to true an ipv6 subnet should be created for this net.
    labels: # object(dict), Labels is a set of key-value labels that have been applied to the Network.
    name: # string, Name of the Network, if empty, related process will skip 
    network_dns_servers: # Array of strings, List of custom DNS server for podman's DNS resolver at network level, all the containers attached to this network will consider resolvers configured at network level.
    network_interface: # string, NetworkInterface is the network interface name on the host.
    options: # object(dict), Options is a set of key-value options that have been applied to the Network.
    subnets: # Array of objects (Subnet), Subnets to use for this network.

# vars_podman_network:
  # debug: # false ← (default) / true
  # disable_dns: # false ← (default) / true
  # driver: # bridge ← (default)
  # executable: # podman ← (default)
  # gateway: # IPv4 or IPv6 gateway for the subnet
  # internal: # false ← (default) / true
  # ip_range: # Allocate container IP from range
  # ipv6: # false / true
  # macvlan: # Create a Macvlan connection based on this device
  # name: # !!required, skip if empty
  # opt:
  #   # mtu: 
  #   # vlan: 
  # recreate: # false ← (default) / true
  # state: # present ← (default) / absent
  # subnet: # Subnet in CIDR format

# containers.podman.podman_play
# https://docs.ansible.com/ansible/latest/collections/containers/podman/podman_play_module.html#ansible-collections-containers-podman-podman-play-module
vars_podman_play:
  state: # present / absent, if empty, podman play process will skip 
  timeout: 300
  query_params:
    create:
      logDriver: # string, Logging driver for the containers in the pod.
      network: # Array of strings, USe the network mode or specify an array of networks.
      start: # boolean, false / true ← (default), Start the pod after creating it.
      staticIPs: # Array of strings, Static IPs used for the pods.
      staticMACs: # Array of strings, Static MACs used for the pods.
      tlsVerify: # boolean, false / true ← (default), Require HTTPS and verify signatures when contacting registries.
    delete:
      force: # boolean, false  ← (default) / true, Remove volumes.
  request_body:
    kube_file: # path to the kube file, if empty, podman play process will skip 
  # authfile: # default is ${XDG_RUNTIME_DIR}/containers/auth.json
  # cert_dir: # /etc/containers/certs.d ← (default) 
  # configmap:
  #   # - /path/to/configmap1
  #   # - /path/to/configmap2
  # debug: # false ← (default) / true
  # executable: # podman ← (default)
  # force: # false / true , when state set to absent, whether delete related volume mention in kube_file
  # kube_file: # !!required, skip if empty
  # log_driver: # Set logging driver for all created containers.
  # log_level: # error ← (default) / info / warn / error / fatal / panic
  # network:
  #   # - podman
  # password: # The username and password to use to authenticate with the registry if required.
  # quiet: # false / true
  # recreate: # false / true
  # seccomp_profile_root: # /var/lib/kubelet/seccomp ← (default)
  # state: # !!required, created / started / absent , containers.podman.podman_play will skip if empty
  # tls_verify: # false / true
  # username: # The username and password to use to authenticate with the registry if required.
  # env_var:
  #   PODMAN_USERNS: # keep-id / keep-id:uid=200,gid=210 / auto / nomap, https://docs.podman.io/en/latest/markdown/options/userns.container.html
    
# vars_pod_name: # Name of the pod to generate systemd unit file, if empty, below process will be skipped

# containers.podman.podman_generate_systemd
# https://docs.ansible.com/ansible/latest/collections/containers/podman/podman_generate_systemd_module.html#ansible-collections-containers-podman-podman-generate-systemd-module
# https://docs.podman.io/en/latest/markdown/podman-generate-systemd.1.html
vars_podman_generate_systemd:
  after: # Add the systemd unit after (After=) option, that ordering dependencies between the list of dependencies and this service.
  container_prefix: # container ← (default)
  dest: # ~/.config/systemd/user/ ← (default), Destination of the generated systemd unit file(s), usually no need to change
  env: # Set environment variables to the systemd unit files.
  executable: # podman ← (default)
  name: # !!required, Name of the pod or container to export, if empty, below process will be skipped
  new: # false ← (default) / true | Generate unit files that create containers and pods, not only start them. 
  no_header: # false ← (default) / true
  pod_prefix: # pod  ← (default)
  requires: # Set the systemd unit requires (Requires=) option.
  restart_policy: # no-restart / on-success / on-failure / on-abnormal / on-watchdog / on-abort / always
  restart_sec: # Configures the time to sleep before restarting a service (as configured with restart-policy). Takes a value in seconds.
  separator: # "-" ← (default) Systemd unit name separator between the name/id of a container/pod and the prefix.
  start_timeout: # Override the default start timeout for the container with the given value in seconds.
  stop_timeout: # Override the default stop timeout for the container with the given value in seconds.
  use_names: # false / true ← (default)
  wants: # Add the systemd unit wants (Wants=) option, that this service is (weak) dependent on.

vars_service:
  podman_pod:
    user_scope:
      skipped: true
      enabled: true
      state: started
  systemd_lingering:
    state: enable