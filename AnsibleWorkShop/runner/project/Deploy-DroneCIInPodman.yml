# code: language=ansible
---
- hosts: "{{ host }}" # kube-2
  gather_facts: yes
  vars:
    podman_rootless_play:
      vars_podman_host: "{{ host }}"
      vars_podman_uri:
        scheme_authority: http://d # http://d/ ← (default), https://docs.podman.io/en/latest/markdown/podman-system-service.1.html
        api_version: v4.5.0 # v4.0.0 ← (default)
        unix_socket: /run/user/{{ target_host.uid }}/podman/podman.sock # socket file path for podman, e.g. /run/user/1000/podman/podman.sock
      vars_podman_play:
        state: "{{ Drone.pod.state }}" # absent / present
        timeout: 600
        kube_file:
          host: "{{ Drone.pod.kube_file_host }}"
          content: "{{ rendered.stdout }}"
        absent:
          query_params:
            force: "{{ Drone.pod.absent_force }}"
      vars_podman_generate_systemd:
        generate:
          path_params:
            name: "{{ Drone.pod.systemd_service }}"
          query_params:
            useName: true
      vars_service:
        podman_pod:
          user_scope:
            skipped: false
            enabled: true
            state: started

  tasks:
    - name: Render kube file templates
      delegate_to: "{{ Drone.pod.kube_file_host }}"
      kubernetes.core.helm_template:
        chart_ref: "{{ Drone.pod.helm_chart_ref }}"
        release_name: "{{ Drone.pod.helm_release_name }}"
        values_files: 
          - "{{ Drone.pod.helm_value_file }}"
      register: rendered

    - name: Invoke podman-rootless-play
      ansible.builtin.include_role:
        name: ansible-podman-rootless-play
      vars: 
        vars_podman_host: "{{ podman_rootless_play.vars_podman_host }}"
        vars_podman_uri: "{{ podman_rootless_play.vars_podman_uri }}"
        vars_podman_play: "{{ podman_rootless_play.vars_podman_play }}"
        vars_podman_generate_systemd: "{{ podman_rootless_play.vars_podman_generate_systemd }}"
        vars_service: "{{ podman_rootless_play.vars_service }}"

    - name: Config DNS
      block:
        - name: Ensure dns record is {{ Drone.pod.state }}
          community.general.nsupdate:
            key_name: "{{ FreeIPA.app.tsig_key_name }}"
            key_algorithm: "{{ FreeIPA.app.tsig_algorithm }}"
            key_secret: "{{ FreeIPA.app.tsig_secret }}"
            server: "{{ FreeIPA.pod.hostIP }}"
            zone: "{{ item.zone }}"
            record: "{{ item.record }}"
            value: "{{ item.value }}"
            type: 'A'
            state: "{{ Drone.pod.state }}"
          loop: "{{ Drone.dns.configs }}"
          delegate_to: localhost
          when:
            - Drone.dns.nsupdate is defined
            - Drone.dns.nsupdate | bool

    - name: Config reverse proxy
      block:
        - name: render and present route config
          ansible.builtin.copy:
            content: "{{ lookup('ansible.builtin.template', item) }}"
            dest: /home/{{ ansible_user }}/traefik/{{ item | basename | replace('.j2','') }}
          loop: "{{ Drone.ingress.tmpl }}"
          when: 
            - podman_rootless_play.vars_podman_play.state == 'present'
            - Drone.ingress.tmpl is defined

        - name: absent route config
          ansible.builtin.file:
            path: /home/{{ ansible_user }}/traefik/{{ item | basename | replace('.j2','') }}
            state: absent
          loop: "{{ Drone.ingress.tmpl }}"
          when: 
            - podman_rootless_play.vars_podman_play.state == 'absent'
            - Drone.ingress.tmpl is defined