# code: language=ansible

# debug vault ldap config
# podman run --rm `
#     --dns 192.168.255.31 `
#     -e RUNNER_PLAYBOOK=./debug/Debug-VaultLDAPAuth.yml `
#     -v ../:/runner `
#     -v ../../KubeWorkShop/:/KubeWorkShop/ `
#     localhost/ansible-ee-aio-new ansible-runner run /runner -vv
---
- hosts: localhost
  gather_facts: false
  vars:
    ipa:
      hostname: ipa.infra.sololab

    # vault_root_token: hvs.TIUIxx67E7ZhfPgkMIsqiYXk

    vault:
      url: https://vault.infra.sololab
      ldap_auth:
        - path: ldap
          config:
            url: ldaps://ipa.infra.sololab:636
            starttls: true
            insecure_tls: false
            certificate: "{{ RootCACert.stdout | default('') }}"
            # Binding - Authenticated Search
            # https://developer.hashicorp.com/vault/docs/auth/ldap#binding-authenticated-search
            binddn: uid=system,cn=sysaccounts,cn=etc,dc=infra,dc=sololab
            bindpass: P@ssw0rd
            userdn: cn=users,cn=accounts,dc=infra,dc=sololab
            userattr: mail
            # Group Membership Resolution
            # https://developer.hashicorp.com/vault/docs/auth/ldap#scenario-1
            # https://stackoverflow.com/questions/32279519/escaping-double-curly-braces-in-ansible
            groupfilter: (&(objectClass=posixgroup)(cn=svc-vault-*)(member:={{ '{{' }}.UserDN{{ '}}' }}))
            # https://github.com/goharbor/harbor/issues/9110#issuecomment-533676484
            # groupfilter: (&(objectClass=posixgroup)(cn=svc-vault-*)(member:1.2.840.113556.1.4.1941:={{ '{{' }}.UserDN{{ '}}' }}))
            groupdn: cn=groups,cn=accounts,dc=infra,dc=sololab
            groupattr: cn
      policies:
        # https://developer.hashicorp.com/vault/tutorials/policies/policies
        - name: vault-root
          hcl: |
            path "secret/*" {
              capabilities = [ "create", "read", "update", "delete", "list", "patch" ]
            }
            
            # Manage identity
            path "identity/*"
            {
              capabilities = ["create", "read", "update", "delete", "list", "sudo"]
            }

            path "sys/health"
            {
              capabilities = ["read", "sudo"]
            }

            # Create and manage ACL policies broadly across Vault

            # List existing policies
            path "sys/policies/acl"
            {
              capabilities = ["list"]
            }

            # Create and manage ACL policies
            path "sys/policies/acl/*"
            {
              capabilities = ["create", "read", "update", "delete", "list", "sudo"]
            }

            # Create and manage ACL policy
            path "sys/policy/*"
            {
              capabilities = ["create", "read", "update", "delete", "list", "sudo"]
            }

            # Enable and manage authentication methods broadly across Vault

            # Manage auth methods broadly across Vault
            path "auth/*"
            {
              capabilities = ["create", "read", "update", "delete", "list", "sudo"]
            }

            # Create, update, and delete auth methods
            path "sys/auth/*"
            {
              capabilities = ["create", "update", "delete", "sudo"]
            }

            # List auth methods
            path "sys/auth"
            {
              capabilities = ["read"]
            }

            # Enable and manage the key/value secrets engine at `secret/` path

            # List, create, update, and delete key/value secrets
            path "secret/*"
            {
              capabilities = ["create", "read", "update", "delete", "list", "sudo"]
            }

            # Manage secrets engines
            path "sys/mounts/*"
            {
              capabilities = ["create", "read", "update", "delete", "list", "sudo"]
            }

            # List existing secrets engines.
            path "sys/mounts"
            {
              capabilities = ["read"]
            }
      identity_group:
        - name: vault-root
          type: external
          policies: 
            - vault-root
          metadata:
            hello: world
          alias:
            - name: svc-vault-root
              ldap_path: 'ldap/'
      
  tasks:
    - name: Retrive token
      when:
        - vault_root_token is not defined
      no_log: true
      block:
        - name: Login and use the resulting token
          community.hashi_vault.vault_login:
            url: "{{ vault.url }}"
            validate_certs: false
            auth_method: ldap
            username: carefree1@infra.sololab
            password: password
          register: login_data

        - name: Set fact vault_root_token
          ansible.builtin.set_fact:
            vault_root_token: "{{ login_data | community.hashi_vault.vault_login_token }}"

    - name: run openssl s_client -showcerts
      ansible.builtin.shell:
        # https://github.com/hashicorp/terraform-provider-aws/issues/10104#issuecomment-565547413
        cmd: >
          echo | 
          openssl s_client -showcerts -connect {{ ipa.hostname }}:443 2>&- | 
          tac | 
          sed -n '/-----END CERTIFICATE-----/,/-----BEGIN CERTIFICATE-----/p; /-----BEGIN CERTIFICATE-----/q' | 
          tac
      changed_when: false
      register: RootCACert

    - name: Enable LDAP auth
      ansible.builtin.uri:
        url: "{{ vault.url }}/v1/sys/auth/{{ item }}"
        validate_certs: false
        method: POST
        headers:
          X-Vault-Token: "{{ vault_root_token }}"
        body_format: json
        body:
          type: ldap
        status_code: 204, 400 # 400 path already in use
      # https://www.redhat.com/sysadmin/ansible-jinja-lists-dictionaries
      loop: "{{ vault.ldap_auth | selectattr('path', 'defined') | map(attribute='path') }}"
      register: vault_sys_auth_ldap
      changed_when: 
        - vault_sys_auth_ldap.status == 204
    
    # https://github.com/drewmullen/ansible-vault-namespaces/blob/4cdf0c74bdeaf6c68347e15f07c9707af966c589/roles/namespace/files/ldap.json
    # https://github.com/marceloalmeida/vault-ldap-ssh/blob/bacb55f00dc8f2d76877b75388dcef05d080a65c/provisioning/roles/vault/tasks/config_ldap.yml
    - name: Update LDAP auth config
      ansible.builtin.uri:
        url: "{{ vault.url }}/v1/auth/{{ item.path }}/config"
        validate_certs: false
        method: POST
        headers:
          X-Vault-Token: "{{ vault_root_token }}"
        body_format: json
        body: "{{ item.config }}"
        status_code: 200, 204
      loop: "{{ vault.ldap_auth }}"
      loop_control:
        label: "{{ item.path }}"

    - name: Set policy
      ansible.builtin.uri:
        url: "{{ vault.url }}/v1/sys/policy/{{ item.name }}"
        validate_certs: false
        method: POST
        headers:
          X-Vault-Token: "{{ vault_root_token }}"
        body_format: json
        body:
          name: "{{ item.name }}"
          policy: "{{ item.hcl }}"
        status_code: 204
      loop: "{{ vault.policies }}"
      loop_control:
        label: "{{ item.name }}"

    # https://developer.hashicorp.com/vault/api-docs/auth/ldap#create-update-ldap-group
    # https://github.com/thisdougb/AnsibleFest2017/blob/35657e8030170d99193968cf8555e63c10635c86/roles/hashivault-ldap-backend/tasks/main.yml
    - name: Set identity group 
      ansible.builtin.uri:
        url: "{{ vault.url }}/v1/identity/group"
        validate_certs: false
        method: POST
        headers:
          X-Vault-Token: "{{ vault_root_token }}"
        body_format: json
        body: "{{ item }}"
        status_code: 200, 204
      # https://docs.ansible.com/ansible/devel/collections/ansible/utils/remove_keys_filter.html
      loop: "{{ vault.identity_group | ansible.utils.remove_keys(target=['alias']) }}"
      loop_control:
        label: "{{ item.name }}"
      register: vault_identity_group
      changed_when: 
        - vault_identity_group.status == 200

    # https://developer.hashicorp.com/vault/api-docs/secret/identity/group-alias
    - name: Set identity group-alias
      ansible.builtin.uri:
        url: "{{ vault.url }}/v1/identity/group-alias"
        validate_certs: false
        method: POST
        headers:
          X-Vault-Token: "{{ vault_root_token }}"
        body_format: json
        body: 
          name: "{{ item.1.name }}"
          canonical_id: "{{ lookup('community.hashi_vault.vault_read', 'identity/group/name/'+item.0.name,
                                      url=vault.url, 
                                      auth_method='token', 
                                      token=vault_root_token,
                                      validate_certs=false
                                  ).data.id }}"
          mount_accessor: "{{ lookup('community.hashi_vault.vault_read', 'sys/auth', 
                                        url=vault.url, 
                                        auth_method='token', 
                                        token=vault_root_token,
                                        validate_certs=false
                                    ).data[item.1.ldap_path].accessor }}"
        status_code: 200, 400 # 400 path already in use
      loop: "{{ vault.identity_group | ansible.builtin.subelements('alias') }}"
      loop_control:
        label: "{{ item.1.name }}"
