# code: language=ansible
---
- name: get kube_file content
  block:
    # - name: slurp yaml file
    #   ansible.builtin.slurp:
    #     src: "{{ podman_play.kube_file.path }}"
    #   register: kube_file_slurp_return
    #   delegate_to: "{{ podman_play.kube_file.host | default(inventory_hostname) }}"
    #   when:
    #     - podman_play.kube_file.path is not none

    - name: get kube_file content from path
      ansible.builtin.set_fact:
        # kube_file_slurp: "{{ kube_file_slurp_return.content }}"
        _kube_file_content: "{{ lookup('ansible.builtin.template', podman_play.kube_file.path) | b64encode }}"
      delegate_to: "{{ podman_play.kube_file.host }}"
      when:
        - podman_play.kube_file.path is not none
        - podman_play.kube_file.content is none

    - name: encode kube file content
      ansible.builtin.set_fact:
        _kube_file_content: "{{ podman_play.kube_file.content | b64encode }}"
      delegate_to: "{{ podman_play.kube_file.host }}"
      when:
        - podman_play.kube_file.content is defined
        - podman_play.kube_file.content is not none

- name: podman kube play
  when:
    - podman_play.state == "present"
    - _kube_file_content is not none
  block:
    - name: Clean up the query params dict
      ansible.builtin.set_fact:
        podman_play_present_query_params: "{{ {item.key: item.value} }}"
      loop: "{{ podman_play.present.query_params | dict2items }}"
      when:
        - podman_play.present.query_params is defined
        - item.value is not none

    - name: Prepare query params for create
      ansible.builtin.set_fact:
        podman_play_present_query_params_string: "?{{ podman_play_present_query_params.keys() | 
                                                        ansible.builtin.zip(podman_play_present_query_params.values()) |
                                                        map('join', '=') |
                                                        join('&') }}"
      when: 
        - podman_play_present_query_params is defined

    - name: Run Podman kube play
      ansible.builtin.uri:
        url: "{{ podman_uri.scheme_authority }}/{{ podman_uri.api_version }}/libpod/play/kube{{ podman_play_present_query_params_string | default('') }}"
        unix_socket: "{{ podman_uri.unix_socket | default(omit) }}"
        method: POST
        status_code: 
          - 200
          - 500
        timeout: "{{ podman_play.timeout | default(300) }}"
        body_format: json
        body: "{{ _kube_file_content | b64decode }}"
      register: podman_kube_play_respond
      changed_when: 
        - podman_kube_play_respond.status == 200
      
    - name: debug podman_kube_play_respond
      debug:
        msg: "{{ podman_kube_play_respond }}"
      failed_when:
        - podman_kube_play_respond.status == 500
        - podman_kube_play_respond.json.cause != 'pod already exists'

    - name: set pod id
      ansible.builtin.set_fact:
        _pod_id: "{{ podman_kube_play_respond.json.Pods[0].ID }}"
      when:
        - podman_kube_play_respond.status == 200

    - name: debug _pod_id
      debug:
        msg: "{{ _pod_id }}"
      when:
        - podman_kube_play_respond.status == 200

- name: podman kube down
  when:
    - podman_play.state == "absent"
    - _kube_file_content is not none
  block:
    - name: Clean up the query params dict
      ansible.builtin.set_fact:
        podman_play_absent_query_params: "{{ {item.key: item.value} }}"
      loop: "{{ podman_play.absent.query_params | dict2items }}"
      when:
        - podman_play.absent.query_params is defined
        - item.value is not none

    - name: Prepare query params for delete
      ansible.builtin.set_fact:
        podman_play_absent_query_params_string: "?{{ podman_play_absent_query_params.keys() | 
                                                        ansible.builtin.zip(podman_play_absent_query_params.values()) |
                                                        map('join', '=') |
                                                        join('&') }}"
      when:
        - podman_play_absent_query_params is defined

    - name: Run podman kube down
      ansible.builtin.uri:
        url: "{{ podman_uri.scheme_authority }}/{{ podman_uri.api_version }}/libpod/play/kube{{ podman_play_absent_query_params_string | default('') }}"
        unix_socket: "{{ podman_uri.unix_socket | default(omit) }}"
        method: DELETE
        status_code: 
          - 200
          - 500
        body_format: json
        body: "{{ _kube_file_content | b64decode }}"
        return_content: true
      register: podman_kube_down_respond
      changed_when: 
        - podman_kube_down_respond.status == 200

    - name: debug
      debug:
        msg: "{{ podman_kube_down_respond }}"