# code: language=ansible
---
# defaults file for ansible-podman-rootless-provision

role_name: ansible-podman-rootless-provision


#--- podman package
defaults_package:
  podman:
    state: present
    include_cockpit_podman: false

# https://docs.ansible.com/ansible/latest/playbook_guide/playbooks_filters.html#combining-hashes-dictionaries
package: "{{ defaults_package | ansible.builtin.combine(vars_package, recursive=True) }}"


#--- cgroups_delegation
defaults_cgroups_delegation:
  all_users:
    state: present
    present_override: false
    resources: cpu cpuset memory pids
  per_user:
    state: skipped
    resources: cpu cpuset io memory pids

cgroups_delegation: "{{ defaults_cgroups_delegation | ansible.builtin.combine(vars_cgroups_delegation, recursive=True) }}"

switch_cgroups_delegation:
  case_other: "{{ cgroups_delegation }}"
  case_pkg_absent:
    all_users:
      skipped: false
      state: absent
    per_user:
      skipped: false
      state: absent


#--- sysctl_params
defaults_sysctl_params:
  state: present
  list:
    - name: net.ipv4.ping_group_range
      value: 0 2000000
    - name: net.ipv4.ip_unprivileged_port_start
      value: 53

sysctl_params: "{{ defaults_sysctl_params | ansible.builtin.combine(vars_sysctl_params, recursive=True) }}"

switch_sysctl_params:
  case_other: "{{ sysctl_params }}" 
  case_pkg_absent:
    state: absent


#--- pam_limits
default_pam_limits:
  state: skipped
  list:
    - comment: add memory lock hard limit to {{ target_user }}
      limit_item: memlock
      limit_type: hard
      value: -1
    - comment: add memory lock soft limit to {{ target_user }}
      limit_item: memlock
      limit_type: soft
      value: -1

pam_limits: "{{ default_pam_limits | ansible.builtin.combine(vars_pam_limits, recursive=True) }}"

switch_pam_limits:
  case_other: "{{ pam_limits }}"
  case_pkg_absent:
    state: absent


#--- sub_ids
defaults_sub_ids:
  state: present
  present_override: false
  subuid:
    user: "{{ target_user }}"
    start_from: 100000
    offset: 65536
  subgid:
    group: "{{ target_user }}"
    start_from: 100000
    offset: 65536

sub_ids: "{{ defaults_sub_ids | ansible.builtin.combine(vars_sub_ids, recursive=True) }}"

switch_sub_ids:
  case_other: "{{ sub_ids }}"
  case_pkg_absent:
    state: absent


#--- kernel_modules
defaults_kernel_modules:
  state: present
  list:
    - ip_tables

kernel_modules: "{{ defaults_kernel_modules | ansible.builtin.combine(vars_kernel_modules, recursive=True) }}"

switch_kernel_modules:
  case_other: "{{ kernel_modules }}" 
  case_pkg_absent:
    state: absent


#--- Podman config
defaults_app_config:
  podman:
    containers_conf:
      state: skipped
      path: /home/{{ target_user }}/.config/containers/containers.conf.d/{{ role_name }}.conf
      content: |
        [containers]
        # log_driver="k8s-file"
        # log_size_max="10m"
        # tz = "Asia/Shanghai"
    storage_conf:
      state: skipped
      path: /home/{{ target_user }}/.config/containers/storage.conf
      content:
    registries_conf:
      state: skipped
      path: /home/{{ target_user }}/.config/containers/registries.conf
      content:

app_config: "{{ defaults_app_config | ansible.builtin.combine(vars_app_config, recursive=True) }}"

switch_app_config_podman_containers_conf:
  case_other: "{{ app_config.podman.containers_conf }}"
  case_pkg_absent: 
    state: absent

switch_app_config_podman_storage_conf:
  case_other: "{{ app_config.podman.storage_conf }}"
  case_pkg_absent: 
    state: absent

switch_app_config_podman_registries_conf:
  case_other: "{{ app_config.podman.registries_conf }}"
  case_pkg_absent: 
    state: absent


#--- service
defaults_service:
  podman_socket:
    user_scope: 
      skipped: false
      enabled: true
      state: started
    system_scope: 
      skipped: true
      enabled: false
      state: stopped
  systemd_lingering:
    state: enable

service: "{{ defaults_service | ansible.builtin.combine(vars_service, recursive=True) }}"

switch_service_podman_socket_user_scope:
  case_other: "{{ service.podman_socket.user_scope }}"
  case_pkg_absent:
    skipped: false
    enabled: false
    state: stopped

switch_service_podman_socket_system_scope:
  case_other: "{{ service.podman_socket.system_scope }}"
  case_pkg_absent:
    skipped: false
    enabled: false
    state: stopped


