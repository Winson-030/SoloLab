apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: keycloak-postgresql-pvc
spec:
  resources:
    requests:
      storage: 20Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-keycloak-cm
data:
  # https://thomascfoulds.com/2020/04/09/jenkins-authentication-with-keycloak.html#:~:text=FreeIPA%20Keycloak%20Realm
  # https://thomascfoulds.com/assets/files/freeipa-realm.json
  # https://github.com/jbride/minio_integrations_quickstart/blob/60a17ca654b2a7095da6e41a0a5912ecb062ac0f/etc/sso/ldaprealm.json
  freeipa-realm.json: |
    {
      "id": "freeipa-realm",
      "realm": "freeipa-realm",
      "displayName": "Sololab Realm",
      "enabled": true,
      "requiredCredentials": [
        "password"
      ],
      "userFederationProviders": [
        {
          "displayName": "ldap-freeipa",
          "providerName": "ldap",
          "priority": 1,
          "fullSyncPeriod": -1,
          "changedSyncPeriod": -1,
          "config": {
            "pagination": "true",
            "debug": "false",
            "searchScope": "1",
            "connectionPooling": "true",
            "usersDn": "cn=users,cn=accounts,dc=infra,dc=sololab",
            "userObjectClasses": "inetOrgPerson, organizationalPerson",
            "usernameLDAPAttribute": "uid",
            "bindDn": "uid=system,cn=sysaccounts,cn=etc,dc=infra,dc=sololab",
            "bindCredential": "P@ssw0rd",
            "rdnLDAPAttribute": "uid",
            "vendor": "rhds",
            "editMode": "READ_ONLY",
            "uuidLDAPAttribute": "ipaUniqueID",
            "connectionUrl": "ldap://freeipa:389",
            "syncRegistrations": "false",
            "authType": "simple"
          }
        }
      ],
      "userFederationMappers": [
        {
          "name": "username",
          "federationMapperType": "user-attribute-ldap-mapper",
          "federationProviderDisplayName": "ldap-freeipa",
          "config": {
            "ldap.attribute": "uid",
            "user.model.attribute": "username",
            "is.mandatory.in.ldap": "true",
            "read.only": "true",
            "always.read.value.from.ldap": "false"
          }
        },
        {
          "name": "first_name",
          "federationMapperType": "user-attribute-ldap-mapper",
          "federationProviderDisplayName": "ldap-freeipa",
          "config": {
            "ldap.attribute": "givenName",
            "user.model.attribute": "firstName",
            "is.mandatory.in.ldap": "true",
            "read.only": "true",
            "always.read.value.from.ldap": "false"
          }
        },
        {
          "name": "last_name",
          "federationMapperType": "user-attribute-ldap-mapper",
          "federationProviderDisplayName": "ldap-freeipa",
          "config": {
            "ldap.attribute": "sn",
            "user.model.attribute": "lastName",
            "is.mandatory.in.ldap": "true",
            "read.only": "true",
            "always.read.value.from.ldap": "false"
          }
        },
        {
          "name": "email",
          "federationMapperType": "user-attribute-ldap-mapper",
          "federationProviderDisplayName": "ldap-freeipa",
          "config": {
            "ldap.attribute": "mail",
            "user.model.attribute": "email",
            "is.mandatory.in.ldap": "false",
            "read.only": "true",
            "always.read.value.from.ldap": "false"
          }
        },
        {
          "name": "creation_date",
          "federationMapperType": "user-attribute-ldap-mapper",
          "federationProviderDisplayName": "ldap-freeipa",
          "config": {
            "ldap.attribute": "createTimestamp",
            "user.model.attribute": "createTimestamp",
            "is.mandatory.in.ldap": "false",
            "read.only": "true",
            "always.read.value.from.ldap": "false"
          }
        },
        {
          "name": "modify_date",
          "federationMapperType": "user-attribute-ldap-mapper",
          "federationProviderDisplayName": "ldap-freeipa",
          "config": {
            "ldap.attribute": "modifyTimestamp",
            "user.model.attribute": "modifyTimestamp",
            "is.mandatory.in.ldap": "false",
            "read.only": "true",
            "always.read.value.from.ldap": "false"
          }
        },
        {
          "name": "picture",
          "federationMapperType": "user-attribute-ldap-mapper",
          "federationProviderDisplayName": "ldap-freeipa",
          "config": {
            "ldap.attribute": "jpegPhoto",
            "user.model.attribute": "picture",
            "is.mandatory.in.ldap": "false",
            "read.only": "true",
            "always.read.value.from.ldap": "true"
          }
        },
        {
          "name": "groups",
          "federationMapperType": "role-ldap-mapper",
          "federationProviderDisplayName": "ldap-freeipa",
          "config": {
            "roles.dn": "cn=groups,cn=accounts,dc=infra,dc=sololab",
            "membership.ldap.attribute": "member",
            "role.name.ldap.attribute": "cn",
            "role.object.classes": "groupOfNames",
            "mode": "LDAP_ONLY",
            "use.realm.roles.mapping": "true"
          }
        }
      ]
    }

---
apiVersion: v1
kind: Pod
metadata:
  name: keycloak
  labels:
    name: keycloak
spec:
  containers:
    # - name: postgresql-bitnami
    #   # https://hub.docker.com/r/bitnami/postgresql/tags?page=1
    #   image: docker.io/bitnami/postgresql:15
    #   imagePullPolicy: IfNotPresent
    #   resources:
    #     limits:
    #       memory: "128Mi"
    #       cpu: "500m"
    #   ports:
    #     - name: postgresql
    #       containerPort: 5432
    #   env:
    #     # https://github.com/bitnami/containers/tree/main/bitnami/postgresql#creating-a-database-user-on-first-run
    #     - name: POSTGRESQL_USERNAME
    #       value: keycloak
    #     - name: POSTGRESQL_PASSWORD
    #       value: password
    #     - name: POSTGRESQL_DATABASE
    #       value: keycloak
    #     - name: POSTGRESQL_LOG_TIMEZONE
    #       value: Asia/Shanghai
    #   volumeMounts:
    #     - name:  postgresql_data
    #     # https://github.com/bitnami/containers/tree/main/bitnami/postgresql#persisting-your-database
    #       mountPath: /bitnami/postgresql

    - name: postgresql-docker
      # https://hub.docker.com/_/postgres/tags?page=1
      image: docker.io/library/postgres:15-alpine
      imagePullPolicy: IfNotPresent
      securityContext:
        privileged: true
      resources:
        limits:
          memory: "128Mi"
          cpu: "500m"
      ports:
        - name: postgresql
          containerPort: 5432
      env:
        # https://github.com/docker-library/docs/tree/master/postgres#environment-variables
        - name: POSTGRES_USER
          value: keycloak
        - name: POSTGRES_PASSWORD
          value: password
        - name: POSTGRES_DB
          value: keycloak
      volumeMounts:
        - name: postgresql_data
          # https://github.com/docker-library/docs/tree/master/postgres#pgdata
          mountPath: /var/lib/postgresql/data
          
    - name: keycloak
      # https://www.keycloak.org/server/containers#_running_a_standard_keycloak_container
      # https://quay.io/repository/keycloak/keycloak?tab=tags
      image: quay.io/keycloak/keycloak:21.0
      imagePullPolicy: IfNotPresent
      resources:
        limits:
          memory: "512Mi"
          cpu: "1000m"
      ports:
        - name: http
          containerPort: 8080
        # - name: https
        #   containerPort: 8443
      # https://github.com/zak905/extending-keycloak-udemy-course/blob/fb271e99b7091ab39fcca76ef21387bdbb1407ce/docker-compose.yaml
      env:
        # https://www.keycloak.org/server/configuration#_setup_of_the_initial_admin_user
        - name: KEYCLOAK_ADMIN
          value: admin
        - name: KEYCLOAK_ADMIN_PASSWORD
          value: password

        # https://www.keycloak.org/server/all-config#_database
        - name: KC_DB # db
          value: postgres
        - name: KC_DB_URL_HOST # db-url-host
          value: keycloak
        - name: KC_DB_URL_DATABASE # db-url-database
          value: keycloak
        - name: KC_DB_USERNAME # db-username
          value: keycloak
        - name: KC_DB_PASSWORD # db-password
          value: password

        # https://www.keycloak.org/server/all-config#_proxy
        # https://www.keycloak.org/server/reverseproxy#_proxy_modes
        - name: KC_PROXY # proxy
          value: edge

        # https://www.keycloak.org/server/containers#_relevant_options
        # https://www.keycloak.org/server/features#_supported_features
        - name: KC_FEATURES
          value: admin-api,admin2,token-exchange

        # https://www.keycloak.org/server/enabletls#_configuring_tls_in_keycloak
        # production mode need hostname and tls cert
        # hostname will force redirect url to the fqdn of
        # hostname value in browser
        # - name: KC_HOSTNAME
        #   value: keycloak

        # the way to import realm
        # 1. use JAVA_OPTS_APPEND
        # - name: JAVA_OPTS_APPEND
        #   value: -Dkeycloak.import=/opt/keycloak/data/import/freeipa-realm.json

        # 2. use --import-realm + data in /opt/keycloak/data/import/
      args:
        - 'start-dev'
        # https://www.keycloak.org/server/importExport#_importing_a_realm_during_startup
        - '--import-realm'
      volumeMounts:
        - name: keycloak_config
          mountPath: /opt/keycloak/data/import/freeipa-realm.json
          subPath: freeipa-realm.json
  volumes:
    - name: postgresql_data
      persistentVolumeClaim:
        claimName: keycloak-postgresql-pvc
    - name: keycloak_config
      configMap:
        name: keycloak-keycloak-cm
        items:
          - key: freeipa-realm.json
            path: freeipa-realm.json
  restartPolicy: Never